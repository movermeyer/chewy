#!/usr/bin/env python
#
# -*- coding: utf-8 -*-
#

import argparse
import portage.output
import os
import sys
import urllib.parse

# TODO This doesn't needed for installed package
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import chewy

log = portage.output.EOutput()


# TODO If no repo given, try to find a modules base,
# scan it and collect used repo bases...?
def do_list(url_list):
    '''Execute `list' command'''
    if not url_list:
        log.eerror('At least one repository URL should be given')
    # Make URLs unique
    urls = set(url_list)

    result = {}
    with chewy.SessionFactory() as sf:
        for url in urls:
            ep = chewy.HttpEndpoint(url)
            result[url] = sf.get_session(ep).get_manifest().modules

    for repo in result:
        log.einfo("Modules from the `{}' repository".format(repo))
        mod_info = []
        for mod in result[repo]:
            mod_info.append((mod.path, mod.version, mod.description))
        print(chewy.FancyGrid(mod_info))



def do_get(url_list, modules_dir):
    '''Execute `get' command'''
    if not url_list:
        log.eerror('At least one url should be passed')

    with chewy.SessionFactory() as sf:
        for url in url_list:
            try:
                ep = chewy.HttpEndpoint(url)
                cs = sf.get_session(ep)
                log.einfo('Get module {}'.format(url))
                data = cs.retrieve_remote_file(ep.geturl())             # Get a remote file into string

                # Going to write just received data to the modules dir
                o = urllib.parse.urlsplit(url)
                os.makedirs(
                    os.path.join(
                        modules_dir
                      , os.path.dirname(o.path).strip('/')
                      )
                  , exist_ok=True
                  )
                # TODO: Strip repobasename
                with open(os.path.join(modules_dir, o.path.strip('/')), 'wt', encoding = 'utf-8') as f:
                    f.write(data)
                    # TODO Retrieve dependencies according manifest
                    # TODO Version compare required as well
            # TODO pass 'can't create modules dir' exception through
            except RuntimeError as ex:
                log.eerror("Can't get {} file: {}".format(url, ex))



def do_status(modules_dir):
    '''Execute `status' command'''

    # Get modules installed in a given dir
    repomod_map = chewy.collect_installed_modules(modules_dir)

    # Retrieve manifests for all used chewy repositories
    manifests = {}
    with chewy.SessionFactory() as sf:
        for repobase in repomod_map.keys():
            if repobase not in manifests:                   # Manifest still not retrieved
                ep = chewy.HttpEndpoint(repobase)
                manifests[repobase] = sf.get_session(ep).get_manifest()

    # Iterate over installed modules (statues actually) grouped by repository
    for repobase, modules in repomod_map.items():
        # Iterate over list of module statuses
        for status in modules:
            local_mod = status.module
            # Find local module in a remote repository
            remote_mod = next(
                filter(lambda x: local_mod.path == x.path, manifests[repobase].modules)
              , None
              )
            # If not found, mark current module as deleted
            if not remote_mod:
                status.set_remote_version(None)
            else:
                assert(remote_mod.path == local_mod.path)
                # Remember the remote version
                status.set_remote_version(remote_mod.version)

    # Group by unique repobase
    for repobase in repomod_map:
        log.einfo('List of {}'.format(repobase))
        # TODO Colorise output (especially new versions)
        print(
            chewy.FancyGrid([
                [
                    m.status_as_string()
                  , m.module.path
                  , m.module.version
                  , m.available_version()
                  , m.module.description
                ]
                for m in repomod_map[repobase]
              ])
          )


def do_update(modules_dir):
    '''Execute `update' command'''
    pass


def main():
    cmd_parser = argparse.ArgumentParser(description='Manage the project specific CMake modules')
    cmd_parser.add_argument(
        '-m'
      , '--modules-dir'
      , metavar='PATH'
      , help='CMake modules directory to operate with'
      )

    subparsers = cmd_parser.add_subparsers(help='Available sub-commands:', dest='cmd')

    list_parser = subparsers.add_parser(
        'list'
      , help='Repositories URI list. Empty list means to get a list of all'
        'repositories which are founded in installed files'
      )
    get_parser = subparsers.add_parser(
        'get'
      , help='Get file from repository and add it to the project as new one'
      )
    update_parser = subparsers.add_parser(
        'update'
      , help='Update [all] installed files from their repo-sources'
      )
    status_parser = subparsers.add_parser('status', help='Check status of [all] installed files')

    list_parser.add_argument('rep_url', metavar='REPO-URL', help='Repositories URL list', nargs='*')
    get_parser.add_argument('file_url', metavar='FILE-URL', help='Files URL list', nargs='+')
    update_parser.add_argument(
        'file_url'
      , metavar='FILE-URL'
      , help='Files URI list. Empty list means to update all installed files'
      , nargs='*'
      )
    status_parser.add_argument(
        'file_url'
      , metavar='FILE-URL'
      , help='Files URI list. Empty list means to check status of all installed files'
      , nargs='*'
      )

    args = cmd_parser.parse_args()

    if args.cmd == 'list':
        # To get a list of modules, the working directory is not required
        do_list(args.rep_url)
    else:
        # Initialize working directory
        if args.modules_dir:
            if os.path.isdir(args.modules_dir):
                modules_dir = args.modules_dir
            else:
                log.eerror("Unable to find CMake modules directory `{}'".format(chewy.EXPECTED_CMAKE_MODULES_PATH))
                sys.exit(1)
        else:
            try:
                modules_dir = chewy.modules_dir_lookup()
            except RuntimeError as e:
                log.eerror(e.args[0])
                sys.exit(1)

        # Continue to dispatch a command...
        if args.cmd == 'get':
            do_get(args.file_url, modules_dir)
        elif args.cmd == 'status':
            do_status(modules_dir)
        elif args.cmd == 'update':
            do_update(modules_dir)

    # Done!
    sys.exit(0)


if __name__ == "__main__":
    main()
